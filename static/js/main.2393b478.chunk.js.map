{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","result","setResult","searchRes","setSearchRes","useEffect","axios","all","get","then","res","data","catch","err","console","log","countries","filter","e","country","includes","map","i","Card","className","bg","text","border","style","margin","Img","variant","src","countryInfo","flag","height","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Footer","Date","toLocaleString","Form","Group","controlId","width","marginLeft","Control","type","placeholder","onChange","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2393b478.chunk.js","sourcesContent":["import React,{ useEffect , useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form';\n\n\n\nfunction App() {\n  const [latest,setLatest]=useState([]); \n  const [result,setResult]=useState([]);\n  const [searchRes,setSearchRes]=useState(\"\");\n  useEffect(()=>{\n    axios.all([\n        axios.get('https://coronavirus-19-api.herokuapp.com/all '),\n        axios.get('https://corona.lmao.ninja/v2/countries?yesterday&')\n\n      ]).then(res=>{\n      setLatest(res[0].data);\n      setResult(res[1].data);\n    })\n    .catch(err=>{\n      console.log(err);\n    });\n  },[])\n\n      const filterCountry=result.filter(e=>{\n        return searchRes !==\"\" ?e.country.includes(searchRes):e;\n      })\n  const countries=filterCountry.map((data,i)=>{\n    return(\n     \n      <Card key={i} className='text-center' bg='light' text='dark'\n  border=\"dark\" style={{margin:'10px'}}  >\n    <Card.Img variant=\"top\" src={data.countryInfo.flag} style={{height:'300px'}}/>\n    <Card.Body>\n    <Card.Title>{data.country}</Card.Title>\n      <Card.Text>\n        Cases    {data.cases}\n              \n      </Card.Text>\n      <Card.Text> Deaths   {data.deaths}</Card.Text>\n      <Card.Text> Recovered {data.recovered}</Card.Text>\n      <Card.Text> TodayCases {data.todayCases}</Card.Text>\n      <Card.Text> TodayDeaths {data.todayDeaths}</Card.Text>\n      <Card.Text>Active {data.active}</Card.Text>\n      <Card.Text>Critical {data.critical}</Card.Text>\n    </Card.Body>\n    \n  </Card>\n    )\n  });\n  \n\n    var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  return (\n    <div >\n      <br/>\n               <h3 style={{textAlign:'center'}}>Covid-19 Live Stats<sub>naveenprabhu</sub></h3>\n      <br/>\n        <CardDeck>\n  <Card className='text-center' bg='warning' text='white'\n  border=\"dark\" style={{margin:'10px'}}  >\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n        {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Till { Date().toLocaleString()} </small>\n    </Card.Footer>\n  </Card>\n  <Card  className='text-center'\n  bg='danger' text='white'\n  border=\"dark\" \n  style={{margin:'10px'}} >\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Till { Date().toLocaleString()} </small>\n    </Card.Footer>\n  </Card>\n  <Card className='text-center'\n  bg='success' text='white'\n  border=\"dark\"  style={{margin:'10px'}} >\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      {latest.recovered} \n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Till { Date().toLocaleString()} </small>\n    </Card.Footer>\n  </Card>\n</CardDeck><br/>\n  <Form>\n  <Form.Group controlId=\"formGroupSearch\" style={{width:'50%',marginLeft:'30%'}}>\n  \n    <Form.Control  type=\"text\" \n      placeholder=\"Search a Country\"\n      onChange={e=>setSearchRes(e.target.value)} />\n     \n  </Form.Group>\n  \n</Form>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}